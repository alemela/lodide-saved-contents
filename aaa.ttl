@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdfa: <http://www.w3.org/ns/rdfa#>.
@prefix xhv: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#>.
@prefix s: <http://schema.org/>.
@prefix lodide: <http://ontology.lodide.io/>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix schema: <http://schema.org/>.

<> a lodide:Exercise;
    lodide:intro "<h2>Write an RDF Graph</h2>\n            <p>In this exercise you write a simple graph with two statements (triples).</p>";
    lodide:finalWords "<ul>\n                    <li>Press the \"Run my code\"-button to verify your graph.</li>\n                </ul>";
    lodide:dataSource _:b30.
_:b30 lodide:taskDescription "<div>The simples way to write an RDF Graph is by\n                using the <a href=\"https://www.w3.org/TR/n-triples/\">N-Triples</a>\n                syntax. In N-Triples every triple, i.e. every edge of the graph,\n                is serialized by a line terminated by a dot (<code>.</code>).\n                The elements of a triple (subject, predicate and object) are separated\n                by spaces, URIs are enclosed by '<code>&lt;</code>' and '<code>&gt;</code>', literals by double\n                quotes (<code>\"</code>).\n                </div>\n                <div>\n                Write a graph (choose \"Direct RDF Input\") that states that:<ul>\n                    <li>The resource with the URI <code>http://example.org/alice</code> is of type <code>http://xmlns.com/foaf/0.1/Person</code></li>\n                    <li>The resource has the given name (<code>http://xmlns.com/foaf/0.1/givenName</code>) \"Alice\"</li>\n                </ul>\n                Note: in RDF the type is indicate using the property <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</code>.\n            </div>\n            ";
    lodide:taskSolutionCode "<http://example.org/alice> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person>.\n<http://example.org/alice> <http://xmlns.com/foaf/0.1/givenName> \"Alice\".";
    lodide:taskSolutionCodeCurrent "<http://example.org/alice> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person>.\n<http://example.org/alice> <http://xmlns.com/foaf/0.1/givenName> \"Alice\".";
    lodide:sourceType lodide:RDF-source.
<> lodide:dataProcessing _:b31.
_:b31 lodide:taskDescription "In this exercise nothing needs to be done here. The code below verifies the entered RDF data. Press the \"Run my code\"-Button below.";
    lodide:taskSolutionCodeCurrent "var triples = g.toArray();\nif (g.length != 2) {\n\talert(\"The graph must consist of two triples\");\n    throw \"wrong size\";\n}\ng.forEach(function(t) {\n    if (!t.subject.equals(rdf.createNamedNode(\"http://example.org/alice\"))) {\n      alert(\"Triple has wrong subject\");\n      throw \"wrong graph\";\n    }\n    if (t.predicate.equals(rdf.createNamedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"))) {\n      if (!t.object.equals(rdf.createNamedNode(\"http://xmlns.com/foaf/0.1/Person\"))) {\n        alert(\"Triple has wrong object\");\n        throw \"wrong graph\";\n      }\n    } else {\n      if (t.predicate.equals(rdf.createNamedNode(\"http://xmlns.com/foaf/0.1/givenName\"))) {\n        if (!t.object.equals(rdf.createLiteral(\"Alice\"))) {\n          alert(\"Triple has wrong object\");\n          throw \"wrong graph\";\n        }\n      } else {\n        alert(\"Triple has wrong predicate\");\n        throw \"wrong graph\";\n      }\n    }\n  })\n  alert(\"This looks about right.\");\n".
