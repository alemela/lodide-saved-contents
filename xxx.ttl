@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdfa: <http://www.w3.org/ns/rdfa#>.
@prefix xhv: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#>.
@prefix s: <http://schema.org/>.
@prefix lodide: <http://ontology.lodide.io/>.
@prefix dc: <http://dublincore.org/2012/06/14/dcelements#>.
@prefix schema: <http://schema.org/>.

<> a lodide:Exercise;
    lodide:intro "<h2>City population</h2>\n            <p>In this exercise you will get a very simple piece of data from DBpedia.</p>";
    lodide:finalWords "<ul>\n                    <li>When you're finished press the \"Run my code\"-button to\n                    run your code.\n                    If you have done everything right you should see an alert with the\n                    population of Bern.</li>\n                </ul>";
    lodide:dataSource _:b30.
_:b30 lodide:taskDescription "<ul>\n                    <li>Enter the DbPedia URI representing the city of Berne\n                    (<code>http://dbpedia.org/resource/Bern</code>), dereferencing\n                    this URI will redirect to the RDF description of the city.</li>\n                </ul>";
    lodide:taskSolutionResource <http://dbpedia.org/resource/Bern>;
    lodide:taskSolutionResourceCurrent "http://dbpedia.org/resource/Bern";
    lodide:sourceType lodide:RDF-URI.
<> lodide:dataProcessing _:b31.
_:b31 lodide:taskDescription "<ul>\n                    <li>Your task is to get the name and the population of the\n                    city described in the graph. For simplicity you may\n                    assume that the graph describes only one city.</li>\n                    <li>You'll probably need the following functions:\n                        <ul>\n                            <li><code>forEach(callback)</code> of the\n                                <code>Graph</code> instance (i.e. the object <code>g</code>)\n                                to access the individual triples,\n                                the <code>callback</code> is a function that gets\n                                a <code>Triple</code> as argument.<br>\n                                A triple has the following properties:\n                                <ul>\n                                    <li><code>subject</code></li>\n                                    <li><code>predicate</code></li>\n                                    <li><code>object</code></li>\n                                </ul>\n                            </li>\n                            <li><code>createNamedNode(string)</code>:\n                                this is also a method of the global <code>rdf</code>\n                                object and is used to create a <em>named node</em>\n                                from the String representation a given\n                                <em>IRI</em> (URI or URL).</li>\n                            <li><code>equals(other)</code>: This method is used\n                                to check if two objects represent the same node.</li>\n                        </ul>\n                    </li>\n                </ul>";
    lodide:taskSolutionCode "var populationProperty = rdf.createNamedNode(\"http://dbpedia.org/property/population\");\nvar subjectNameProperty = rdf.createNamedNode(\"http://dbpedia.org/property/subjectName\");\nvar population = null;\nvar name = null;\ng.forEach(function(t) {\n    if (t.predicate.equals(populationProperty)) {\n      population = t.object;\n    }\n    if (t.predicate.equals(subjectNameProperty)) {\n      name = t.object;\n    }\n  });\nalert(\"The population of \"+name+\" is \"+population);\n";
    lodide:taskSolutionCodeCurrent "".
